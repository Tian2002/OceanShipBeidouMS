// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"OceanShipBeidouMS/biz/repository/mysql/model"
)

func newShip(db *gorm.DB, opts ...gen.DOOption) ship {
	_ship := ship{}

	_ship.shipDo.UseDB(db, opts...)
	_ship.shipDo.UseModel(&model.Ship{})

	tableName := _ship.shipDo.TableName()
	_ship.ALL = field.NewAsterisk(tableName)
	_ship.ID = field.NewInt32(tableName, "id")
	_ship.Name = field.NewString(tableName, "name")
	_ship.CreatedAt = field.NewTime(tableName, "created_at")
	_ship.UpdatedAt = field.NewTime(tableName, "updated_at")
	_ship.Extra = field.NewString(tableName, "extra")

	_ship.fillFieldMap()

	return _ship
}

type ship struct {
	shipDo shipDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	Extra     field.String

	fieldMap map[string]field.Expr
}

func (s ship) Table(newTableName string) *ship {
	s.shipDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s ship) As(alias string) *ship {
	s.shipDo.DO = *(s.shipDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *ship) updateTableName(table string) *ship {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Extra = field.NewString(table, "extra")

	s.fillFieldMap()

	return s
}

func (s *ship) WithContext(ctx context.Context) IShipDo { return s.shipDo.WithContext(ctx) }

func (s ship) TableName() string { return s.shipDo.TableName() }

func (s ship) Alias() string { return s.shipDo.Alias() }

func (s ship) Columns(cols ...field.Expr) gen.Columns { return s.shipDo.Columns(cols...) }

func (s *ship) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *ship) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["extra"] = s.Extra
}

func (s ship) clone(db *gorm.DB) ship {
	s.shipDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s ship) replaceDB(db *gorm.DB) ship {
	s.shipDo.ReplaceDB(db)
	return s
}

type shipDo struct{ gen.DO }

type IShipDo interface {
	gen.SubQuery
	Debug() IShipDo
	WithContext(ctx context.Context) IShipDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShipDo
	WriteDB() IShipDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShipDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShipDo
	Not(conds ...gen.Condition) IShipDo
	Or(conds ...gen.Condition) IShipDo
	Select(conds ...field.Expr) IShipDo
	Where(conds ...gen.Condition) IShipDo
	Order(conds ...field.Expr) IShipDo
	Distinct(cols ...field.Expr) IShipDo
	Omit(cols ...field.Expr) IShipDo
	Join(table schema.Tabler, on ...field.Expr) IShipDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShipDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShipDo
	Group(cols ...field.Expr) IShipDo
	Having(conds ...gen.Condition) IShipDo
	Limit(limit int) IShipDo
	Offset(offset int) IShipDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShipDo
	Unscoped() IShipDo
	Create(values ...*model.Ship) error
	CreateInBatches(values []*model.Ship, batchSize int) error
	Save(values ...*model.Ship) error
	First() (*model.Ship, error)
	Take() (*model.Ship, error)
	Last() (*model.Ship, error)
	Find() ([]*model.Ship, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Ship, err error)
	FindInBatches(result *[]*model.Ship, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Ship) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShipDo
	Assign(attrs ...field.AssignExpr) IShipDo
	Joins(fields ...field.RelationField) IShipDo
	Preload(fields ...field.RelationField) IShipDo
	FirstOrInit() (*model.Ship, error)
	FirstOrCreate() (*model.Ship, error)
	FindByPage(offset int, limit int) (result []*model.Ship, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShipDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shipDo) Debug() IShipDo {
	return s.withDO(s.DO.Debug())
}

func (s shipDo) WithContext(ctx context.Context) IShipDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shipDo) ReadDB() IShipDo {
	return s.Clauses(dbresolver.Read)
}

func (s shipDo) WriteDB() IShipDo {
	return s.Clauses(dbresolver.Write)
}

func (s shipDo) Session(config *gorm.Session) IShipDo {
	return s.withDO(s.DO.Session(config))
}

func (s shipDo) Clauses(conds ...clause.Expression) IShipDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shipDo) Returning(value interface{}, columns ...string) IShipDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shipDo) Not(conds ...gen.Condition) IShipDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shipDo) Or(conds ...gen.Condition) IShipDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shipDo) Select(conds ...field.Expr) IShipDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shipDo) Where(conds ...gen.Condition) IShipDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shipDo) Order(conds ...field.Expr) IShipDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shipDo) Distinct(cols ...field.Expr) IShipDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shipDo) Omit(cols ...field.Expr) IShipDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shipDo) Join(table schema.Tabler, on ...field.Expr) IShipDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shipDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShipDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shipDo) RightJoin(table schema.Tabler, on ...field.Expr) IShipDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shipDo) Group(cols ...field.Expr) IShipDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shipDo) Having(conds ...gen.Condition) IShipDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shipDo) Limit(limit int) IShipDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shipDo) Offset(offset int) IShipDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shipDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShipDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shipDo) Unscoped() IShipDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shipDo) Create(values ...*model.Ship) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shipDo) CreateInBatches(values []*model.Ship, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shipDo) Save(values ...*model.Ship) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shipDo) First() (*model.Ship, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ship), nil
	}
}

func (s shipDo) Take() (*model.Ship, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ship), nil
	}
}

func (s shipDo) Last() (*model.Ship, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ship), nil
	}
}

func (s shipDo) Find() ([]*model.Ship, error) {
	result, err := s.DO.Find()
	return result.([]*model.Ship), err
}

func (s shipDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Ship, err error) {
	buf := make([]*model.Ship, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shipDo) FindInBatches(result *[]*model.Ship, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shipDo) Attrs(attrs ...field.AssignExpr) IShipDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shipDo) Assign(attrs ...field.AssignExpr) IShipDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shipDo) Joins(fields ...field.RelationField) IShipDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shipDo) Preload(fields ...field.RelationField) IShipDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shipDo) FirstOrInit() (*model.Ship, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ship), nil
	}
}

func (s shipDo) FirstOrCreate() (*model.Ship, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ship), nil
	}
}

func (s shipDo) FindByPage(offset int, limit int) (result []*model.Ship, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shipDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shipDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shipDo) Delete(models ...*model.Ship) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shipDo) withDO(do gen.Dao) *shipDo {
	s.DO = *do.(*gen.DO)
	return s
}
