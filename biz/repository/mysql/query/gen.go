// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                         = new(Query)
	BeiDouCard                *beiDouCard
	Location                  *location
	OriginalMessageStationOne *originalMessageStationOne
	OriginalMessageStationTwo *originalMessageStationTwo
	Permission                *permission
	Ship                      *ship
	Ship2mi                   *ship2mi
	User                      *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	BeiDouCard = &Q.BeiDouCard
	Location = &Q.Location
	OriginalMessageStationOne = &Q.OriginalMessageStationOne
	OriginalMessageStationTwo = &Q.OriginalMessageStationTwo
	Permission = &Q.Permission
	Ship = &Q.Ship
	Ship2mi = &Q.Ship2mi
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                        db,
		BeiDouCard:                newBeiDouCard(db, opts...),
		Location:                  newLocation(db, opts...),
		OriginalMessageStationOne: newOriginalMessageStationOne(db, opts...),
		OriginalMessageStationTwo: newOriginalMessageStationTwo(db, opts...),
		Permission:                newPermission(db, opts...),
		Ship:                      newShip(db, opts...),
		Ship2mi:                   newShip2mi(db, opts...),
		User:                      newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	BeiDouCard                beiDouCard
	Location                  location
	OriginalMessageStationOne originalMessageStationOne
	OriginalMessageStationTwo originalMessageStationTwo
	Permission                permission
	Ship                      ship
	Ship2mi                   ship2mi
	User                      user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		BeiDouCard:                q.BeiDouCard.clone(db),
		Location:                  q.Location.clone(db),
		OriginalMessageStationOne: q.OriginalMessageStationOne.clone(db),
		OriginalMessageStationTwo: q.OriginalMessageStationTwo.clone(db),
		Permission:                q.Permission.clone(db),
		Ship:                      q.Ship.clone(db),
		Ship2mi:                   q.Ship2mi.clone(db),
		User:                      q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		BeiDouCard:                q.BeiDouCard.replaceDB(db),
		Location:                  q.Location.replaceDB(db),
		OriginalMessageStationOne: q.OriginalMessageStationOne.replaceDB(db),
		OriginalMessageStationTwo: q.OriginalMessageStationTwo.replaceDB(db),
		Permission:                q.Permission.replaceDB(db),
		Ship:                      q.Ship.replaceDB(db),
		Ship2mi:                   q.Ship2mi.replaceDB(db),
		User:                      q.User.replaceDB(db),
	}
}

type queryCtx struct {
	BeiDouCard                IBeiDouCardDo
	Location                  ILocationDo
	OriginalMessageStationOne IOriginalMessageStationOneDo
	OriginalMessageStationTwo IOriginalMessageStationTwoDo
	Permission                IPermissionDo
	Ship                      IShipDo
	Ship2mi                   IShip2miDo
	User                      IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		BeiDouCard:                q.BeiDouCard.WithContext(ctx),
		Location:                  q.Location.WithContext(ctx),
		OriginalMessageStationOne: q.OriginalMessageStationOne.WithContext(ctx),
		OriginalMessageStationTwo: q.OriginalMessageStationTwo.WithContext(ctx),
		Permission:                q.Permission.WithContext(ctx),
		Ship:                      q.Ship.WithContext(ctx),
		Ship2mi:                   q.Ship2mi.WithContext(ctx),
		User:                      q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
