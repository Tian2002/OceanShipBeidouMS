// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"OceanShipBeidouMS/biz/repository/mysql/model"
)

func newOriginalMessageStationOne(db *gorm.DB, opts ...gen.DOOption) originalMessageStationOne {
	_originalMessageStationOne := originalMessageStationOne{}

	_originalMessageStationOne.originalMessageStationOneDo.UseDB(db, opts...)
	_originalMessageStationOne.originalMessageStationOneDo.UseModel(&model.OriginalMessageStationOne{})

	tableName := _originalMessageStationOne.originalMessageStationOneDo.TableName()
	_originalMessageStationOne.ALL = field.NewAsterisk(tableName)
	_originalMessageStationOne.ID = field.NewInt32(tableName, "id")
	_originalMessageStationOne.OriginatorNumber = field.NewString(tableName, "originator_number")
	_originalMessageStationOne.DestinationNumber = field.NewString(tableName, "destination_number")
	_originalMessageStationOne.MessageType = field.NewBool(tableName, "message_type")
	_originalMessageStationOne.Timestamp = field.NewTime(tableName, "timestamp")
	_originalMessageStationOne.Longitude = field.NewFloat64(tableName, "longitude")
	_originalMessageStationOne.Latitude = field.NewFloat64(tableName, "latitude")
	_originalMessageStationOne.MessageContent = field.NewString(tableName, "message_content")
	_originalMessageStationOne.CreatedAt = field.NewTime(tableName, "created_at")
	_originalMessageStationOne.UpdatedAt = field.NewTime(tableName, "updated_at")
	_originalMessageStationOne.Extra = field.NewString(tableName, "extra")

	_originalMessageStationOne.fillFieldMap()

	return _originalMessageStationOne
}

type originalMessageStationOne struct {
	originalMessageStationOneDo originalMessageStationOneDo

	ALL               field.Asterisk
	ID                field.Int32
	OriginatorNumber  field.String
	DestinationNumber field.String
	MessageType       field.Bool
	Timestamp         field.Time
	Longitude         field.Float64
	Latitude          field.Float64
	MessageContent    field.String
	CreatedAt         field.Time
	UpdatedAt         field.Time
	Extra             field.String

	fieldMap map[string]field.Expr
}

func (o originalMessageStationOne) Table(newTableName string) *originalMessageStationOne {
	o.originalMessageStationOneDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o originalMessageStationOne) As(alias string) *originalMessageStationOne {
	o.originalMessageStationOneDo.DO = *(o.originalMessageStationOneDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *originalMessageStationOne) updateTableName(table string) *originalMessageStationOne {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt32(table, "id")
	o.OriginatorNumber = field.NewString(table, "originator_number")
	o.DestinationNumber = field.NewString(table, "destination_number")
	o.MessageType = field.NewBool(table, "message_type")
	o.Timestamp = field.NewTime(table, "timestamp")
	o.Longitude = field.NewFloat64(table, "longitude")
	o.Latitude = field.NewFloat64(table, "latitude")
	o.MessageContent = field.NewString(table, "message_content")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.Extra = field.NewString(table, "extra")

	o.fillFieldMap()

	return o
}

func (o *originalMessageStationOne) WithContext(ctx context.Context) IOriginalMessageStationOneDo {
	return o.originalMessageStationOneDo.WithContext(ctx)
}

func (o originalMessageStationOne) TableName() string {
	return o.originalMessageStationOneDo.TableName()
}

func (o originalMessageStationOne) Alias() string { return o.originalMessageStationOneDo.Alias() }

func (o originalMessageStationOne) Columns(cols ...field.Expr) gen.Columns {
	return o.originalMessageStationOneDo.Columns(cols...)
}

func (o *originalMessageStationOne) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *originalMessageStationOne) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["id"] = o.ID
	o.fieldMap["originator_number"] = o.OriginatorNumber
	o.fieldMap["destination_number"] = o.DestinationNumber
	o.fieldMap["message_type"] = o.MessageType
	o.fieldMap["timestamp"] = o.Timestamp
	o.fieldMap["longitude"] = o.Longitude
	o.fieldMap["latitude"] = o.Latitude
	o.fieldMap["message_content"] = o.MessageContent
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["extra"] = o.Extra
}

func (o originalMessageStationOne) clone(db *gorm.DB) originalMessageStationOne {
	o.originalMessageStationOneDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o originalMessageStationOne) replaceDB(db *gorm.DB) originalMessageStationOne {
	o.originalMessageStationOneDo.ReplaceDB(db)
	return o
}

type originalMessageStationOneDo struct{ gen.DO }

type IOriginalMessageStationOneDo interface {
	gen.SubQuery
	Debug() IOriginalMessageStationOneDo
	WithContext(ctx context.Context) IOriginalMessageStationOneDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOriginalMessageStationOneDo
	WriteDB() IOriginalMessageStationOneDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOriginalMessageStationOneDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOriginalMessageStationOneDo
	Not(conds ...gen.Condition) IOriginalMessageStationOneDo
	Or(conds ...gen.Condition) IOriginalMessageStationOneDo
	Select(conds ...field.Expr) IOriginalMessageStationOneDo
	Where(conds ...gen.Condition) IOriginalMessageStationOneDo
	Order(conds ...field.Expr) IOriginalMessageStationOneDo
	Distinct(cols ...field.Expr) IOriginalMessageStationOneDo
	Omit(cols ...field.Expr) IOriginalMessageStationOneDo
	Join(table schema.Tabler, on ...field.Expr) IOriginalMessageStationOneDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOriginalMessageStationOneDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOriginalMessageStationOneDo
	Group(cols ...field.Expr) IOriginalMessageStationOneDo
	Having(conds ...gen.Condition) IOriginalMessageStationOneDo
	Limit(limit int) IOriginalMessageStationOneDo
	Offset(offset int) IOriginalMessageStationOneDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOriginalMessageStationOneDo
	Unscoped() IOriginalMessageStationOneDo
	Create(values ...*model.OriginalMessageStationOne) error
	CreateInBatches(values []*model.OriginalMessageStationOne, batchSize int) error
	Save(values ...*model.OriginalMessageStationOne) error
	First() (*model.OriginalMessageStationOne, error)
	Take() (*model.OriginalMessageStationOne, error)
	Last() (*model.OriginalMessageStationOne, error)
	Find() ([]*model.OriginalMessageStationOne, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OriginalMessageStationOne, err error)
	FindInBatches(result *[]*model.OriginalMessageStationOne, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OriginalMessageStationOne) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOriginalMessageStationOneDo
	Assign(attrs ...field.AssignExpr) IOriginalMessageStationOneDo
	Joins(fields ...field.RelationField) IOriginalMessageStationOneDo
	Preload(fields ...field.RelationField) IOriginalMessageStationOneDo
	FirstOrInit() (*model.OriginalMessageStationOne, error)
	FirstOrCreate() (*model.OriginalMessageStationOne, error)
	FindByPage(offset int, limit int) (result []*model.OriginalMessageStationOne, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOriginalMessageStationOneDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o originalMessageStationOneDo) Debug() IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Debug())
}

func (o originalMessageStationOneDo) WithContext(ctx context.Context) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o originalMessageStationOneDo) ReadDB() IOriginalMessageStationOneDo {
	return o.Clauses(dbresolver.Read)
}

func (o originalMessageStationOneDo) WriteDB() IOriginalMessageStationOneDo {
	return o.Clauses(dbresolver.Write)
}

func (o originalMessageStationOneDo) Session(config *gorm.Session) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Session(config))
}

func (o originalMessageStationOneDo) Clauses(conds ...clause.Expression) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o originalMessageStationOneDo) Returning(value interface{}, columns ...string) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o originalMessageStationOneDo) Not(conds ...gen.Condition) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o originalMessageStationOneDo) Or(conds ...gen.Condition) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o originalMessageStationOneDo) Select(conds ...field.Expr) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o originalMessageStationOneDo) Where(conds ...gen.Condition) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o originalMessageStationOneDo) Order(conds ...field.Expr) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o originalMessageStationOneDo) Distinct(cols ...field.Expr) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o originalMessageStationOneDo) Omit(cols ...field.Expr) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o originalMessageStationOneDo) Join(table schema.Tabler, on ...field.Expr) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o originalMessageStationOneDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o originalMessageStationOneDo) RightJoin(table schema.Tabler, on ...field.Expr) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o originalMessageStationOneDo) Group(cols ...field.Expr) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o originalMessageStationOneDo) Having(conds ...gen.Condition) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o originalMessageStationOneDo) Limit(limit int) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o originalMessageStationOneDo) Offset(offset int) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o originalMessageStationOneDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o originalMessageStationOneDo) Unscoped() IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Unscoped())
}

func (o originalMessageStationOneDo) Create(values ...*model.OriginalMessageStationOne) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o originalMessageStationOneDo) CreateInBatches(values []*model.OriginalMessageStationOne, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o originalMessageStationOneDo) Save(values ...*model.OriginalMessageStationOne) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o originalMessageStationOneDo) First() (*model.OriginalMessageStationOne, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OriginalMessageStationOne), nil
	}
}

func (o originalMessageStationOneDo) Take() (*model.OriginalMessageStationOne, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OriginalMessageStationOne), nil
	}
}

func (o originalMessageStationOneDo) Last() (*model.OriginalMessageStationOne, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OriginalMessageStationOne), nil
	}
}

func (o originalMessageStationOneDo) Find() ([]*model.OriginalMessageStationOne, error) {
	result, err := o.DO.Find()
	return result.([]*model.OriginalMessageStationOne), err
}

func (o originalMessageStationOneDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OriginalMessageStationOne, err error) {
	buf := make([]*model.OriginalMessageStationOne, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o originalMessageStationOneDo) FindInBatches(result *[]*model.OriginalMessageStationOne, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o originalMessageStationOneDo) Attrs(attrs ...field.AssignExpr) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o originalMessageStationOneDo) Assign(attrs ...field.AssignExpr) IOriginalMessageStationOneDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o originalMessageStationOneDo) Joins(fields ...field.RelationField) IOriginalMessageStationOneDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o originalMessageStationOneDo) Preload(fields ...field.RelationField) IOriginalMessageStationOneDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o originalMessageStationOneDo) FirstOrInit() (*model.OriginalMessageStationOne, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OriginalMessageStationOne), nil
	}
}

func (o originalMessageStationOneDo) FirstOrCreate() (*model.OriginalMessageStationOne, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OriginalMessageStationOne), nil
	}
}

func (o originalMessageStationOneDo) FindByPage(offset int, limit int) (result []*model.OriginalMessageStationOne, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o originalMessageStationOneDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o originalMessageStationOneDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o originalMessageStationOneDo) Delete(models ...*model.OriginalMessageStationOne) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *originalMessageStationOneDo) withDO(do gen.Dao) *originalMessageStationOneDo {
	o.DO = *do.(*gen.DO)
	return o
}
